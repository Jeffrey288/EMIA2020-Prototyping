# 1 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\ascii.ino"



# 5 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\ascii.ino" 2

# 5 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\ascii.ino"
// https://www.arduino.cc/reference/en/language/variables/utilities/progmem/?_gl=1*1xdukz1*_ga*MTc5OTAxNjE2LjE2NjU3NzM1NzM.*_ga_NEXN8H46L5*MTY2ODI2ODg4Ny42LjAuMTY2ODI2ODg4Ny4wLjAuMA..

const 
# 7 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\ascii.ino" 3
     __attribute__((__progmem__)) 
# 7 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\ascii.ino"
             uint16_t asciiBitmap[95][16] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*" ",0*/ // -> 32
    {0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00}, /*"!",1*/
    {0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*""",2*/
    {0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00}, /*"#",3*/
    {0x00, 0x18, 0x18, 0x3C, 0x66, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00}, /*"$",4*/
    {0x00, 0x00, 0x0E, 0x1B, 0x5B, 0x6E, 0x30, 0x18, 0x0C, 0x76, 0xDA, 0xD8, 0x70, 0x00, 0x00, 0x00}, /*"%",5*/
    {0x00, 0x00, 0x00, 0x1C, 0x36, 0x36, 0x1C, 0x06, 0xF6, 0x66, 0x66, 0xDC, 0x00, 0x00, 0x00, 0x00}, /*"&",6*/
    {0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"'",7*/
    {0x00, 0x00, 0x00, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x00, 0x00}, /*"(",8*/
    {0x00, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x00, 0x00}, /*")",9*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x38, 0xFE, 0x38, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"*",10*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"+",11*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x30, 0x18, 0x00, 0x00}, /*",",12*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"-",13*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00}, /*".",14*/
    {0x00, 0x00, 0x00, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x06, 0x06, 0x00, 0x00, 0x00}, /*"/",15*/
    {0x00, 0x00, 0x00, 0x78, 0xCC, 0xEC, 0xEC, 0xCC, 0xDC, 0xDC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00}, /*"0",16*/
    {0x00, 0x00, 0x00, 0x30, 0x38, 0x3E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00}, /*"1",17*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x7E, 0x00, 0x00, 0x00, 0x00}, /*"2",18*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x60, 0x38, 0x60, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"3",19*/
    {0x00, 0x00, 0x00, 0x0C, 0x0C, 0x6C, 0x6C, 0x6C, 0x66, 0xFE, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00}, /*"4",20*/
    {0x00, 0x00, 0x00, 0x7E, 0x06, 0x06, 0x06, 0x3E, 0x60, 0x60, 0x30, 0x1E, 0x00, 0x00, 0x00, 0x00}, /*"5",21*/
    {0x00, 0x00, 0x00, 0x38, 0x18, 0x0C, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"6",22*/
    {0x00, 0x00, 0x00, 0x7E, 0x60, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00}, /*"7",23*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x6E, 0x3C, 0x76, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"8",24*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x30, 0x18, 0x1C, 0x00, 0x00, 0x00, 0x00}, /*"9",25*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00}, /*":",26*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x38, 0x38, 0x30, 0x18, 0x00, 0x00}, /*";",27*/
    {0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00}, /*"<",28*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"=",29*/
    {0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00}, /*">",30*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x30, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00}, /*"?",31*/
    {0x00, 0x00, 0x00, 0x7E, 0xC3, 0xC3, 0xF3, 0xDB, 0xDB, 0xF3, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00}, /*"@",32*/
    {0x00, 0x00, 0x00, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"A",33*/
    {0x00, 0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00}, /*"B",34*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"C",35*/
    {0x00, 0x00, 0x00, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x66, 0x66, 0x36, 0x1E, 0x00, 0x00, 0x00, 0x00}, /*"D",36*/
    {0x00, 0x00, 0x00, 0x7E, 0x06, 0x06, 0x06, 0x3E, 0x06, 0x06, 0x06, 0x7E, 0x00, 0x00, 0x00, 0x00}, /*"E",37*/
    {0x00, 0x00, 0x00, 0x7E, 0x06, 0x06, 0x06, 0x3E, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00}, /*"F",38*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x06, 0x06, 0x76, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00}, /*"G",39*/
    {0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"H",40*/
    {0x00, 0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"I",41*/
    {0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"J",42*/
    {0x00, 0x00, 0x00, 0x66, 0x66, 0x36, 0x36, 0x1E, 0x36, 0x36, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"K",43*/
    {0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7E, 0x00, 0x00, 0x00, 0x00}, /*"L",44*/
    {0x00, 0x00, 0x00, 0xC6, 0xC6, 0xEE, 0xD6, 0xD6, 0xD6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00}, /*"M",45*/
    {0x00, 0x00, 0x00, 0xC6, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00}, /*"N",46*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"O",47*/
    {0x00, 0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00}, /*"P",48*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x30, 0x60, 0x00, 0x00}, /*"Q",49*/
    {0x00, 0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"R",50*/
    {0x00, 0x00, 0x00, 0x3C, 0x66, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"S",51*/
    {0x00, 0x00, 0x00, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00}, /*"T",52*/
    {0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"U",53*/
    {0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00}, /*"V",54*/
    {0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00}, /*"W",55*/
    {0x00, 0x00, 0x00, 0x66, 0x66, 0x2C, 0x18, 0x18, 0x34, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"X",56*/
    {0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00}, /*"Y",57*/
    {0x00, 0x00, 0x00, 0x7E, 0x60, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x06, 0x7E, 0x00, 0x00, 0x00, 0x00}, /*"Z",58*/
    {0x00, 0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00}, /*"[",59*/
    {0x00, 0x00, 0x00, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x00, 0x00, 0x00}, /*"\",60*/
    {0x00, 0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00}, /*"]",61*/
    {0x00, 0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"^",62*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00}, /*"_",63*/
    {0x00, 0x1C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"`",64*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00}, /*"a",65*/
    {0x00, 0x00, 0x00, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00}, /*"b",66*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x06, 0x06, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"c",67*/
    {0x00, 0x00, 0x00, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00}, /*"d",68*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x7E, 0x06, 0x06, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"e",69*/
    {0x00, 0x00, 0x00, 0x78, 0x0C, 0x0C, 0x0C, 0x7E, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00}, /*"f",70*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x3E, 0x00}, /*"g",71*/
    {0x00, 0x00, 0x00, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"h",72*/
    {0x00, 0x00, 0x18, 0x18, 0x00, 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00}, /*"i",73*/
    {0x00, 0x00, 0x30, 0x30, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1E, 0x00}, /*"j",74*/
    {0x00, 0x00, 0x00, 0x06, 0x06, 0x66, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"k",75*/
    {0x00, 0x00, 0x00, 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00}, /*"l",76*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00, 0x00}, /*"m",77*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"n",78*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00}, /*"o",79*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00}, /*"p",80*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00}, /*"q",81*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x76, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00}, /*"r",82*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x06, 0x06, 0x3C, 0x60, 0x60, 0x3E, 0x00, 0x00, 0x00, 0x00}, /*"s",83*/
    {0x00, 0x00, 0x00, 0x0C, 0x0C, 0x7E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00}, /*"t",84*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00}, /*"u",85*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00}, /*"v",86*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xD6, 0xD6, 0xD6, 0xD6, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00}, /*"w",87*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, /*"x",88*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x30, 0x18, 0x0F, 0x00}, /*"y",89*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x7E, 0x00, 0x00, 0x00, 0x00}, /*"z",90*/
    {0x00, 0x00, 0x00, 0x30, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00}, /*"{",91*/
    {0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00}, /*"|",92*/
    {0x00, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x60, 0x30, 0x18, 0x18, 0x18, 0x0C, 0x00, 0x00}, /*"}",93*/
    {0x00, 0x00, 0x00, 0x8E, 0xDB, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"~",94*/
};
# 1 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino"
# 2 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 2
# 3 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 2
# 4 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 2
# 5 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 2

const 
# 6 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 3
     __attribute__((__progmem__)) 
# 6 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino"
             uint8_t scan_face[12 * 96] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00,
    0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00,
    0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00,
    0x00, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaf, 0x00,
    0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0xe0, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0xfb, 0xe0, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x08, 0x1f, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00,
    0x00, 0x40, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x04, 0x00,
    0x00, 0xe0, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x0f, 0x00,
    0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0e, 0x00,
    0x00, 0xe0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x0f, 0x00,
    0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00,
    0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00,
    0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00,
    0x00, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

// const PROGMEM uint8_t scan_bracelet[12 * 96] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xf0, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0a, 0xaa, 0xaa, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x05, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xfa, 0x5f, 0xbc, 0x01, 0xc7, 0x14, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0xe5, 0xaf, 0xbc, 0x03, 0xef, 0xbc, 0x40, 0x00, 
//     0x00, 0x00, 0x00, 0x0f, 0x13, 0xf3, 0xd8, 0x01, 0xef, 0xbe, 0xf0, 0x00, 
//     0x00, 0x00, 0x00, 0x08, 0xeb, 0xfd, 0xb0, 0x03, 0xef, 0xbd, 0xf0, 0x00, 
//     0x00, 0x00, 0x00, 0x07, 0x38, 0x3f, 0x80, 0x03, 0xef, 0xbe, 0xf0, 0x00, 
//     0x00, 0x00, 0x00, 0x3f, 0xfb, 0xcf, 0xb8, 0x03, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x00, 0xff, 0xf7, 0xf7, 0xbc, 0x03, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x01, 0xff, 0xcc, 0xff, 0xbc, 0x03, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x03, 0xfe, 0x3b, 0x7f, 0xb8, 0x03, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x03, 0xf8, 0xfb, 0x7f, 0xc0, 0x03, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x07, 0xfb, 0xfa, 0x7f, 0x90, 0x1b, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x07, 0xf7, 0xfd, 0xff, 0x78, 0x1b, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x07, 0xfb, 0xff, 0xff, 0xb8, 0x3b, 0xff, 0xff, 0xe0, 0x00, 
//     0x00, 0x00, 0x0f, 0xf7, 0xff, 0xff, 0x7c, 0x3b, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x0f, 0xfb, 0xff, 0xff, 0x90, 0x1f, 0xff, 0xff, 0xe0, 0x00, 
//     0x00, 0x00, 0x0f, 0xfb, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xf0, 0x00, 
//     0x00, 0x00, 0x0f, 0xfb, 0xff, 0xff, 0xb8, 0x1f, 0xff, 0xff, 0xe0, 0x00, 
//     0x00, 0x00, 0x0f, 0xf7, 0xff, 0xff, 0xb8, 0x1f, 0xff, 0xff, 0xe0, 0x00, 
//     0x00, 0x00, 0x0f, 0xfb, 0xff, 0xff, 0xb8, 0x0f, 0xff, 0xff, 0xe0, 0x00, 
//     0x00, 0x00, 0x0f, 0xf7, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xc0, 0x00, 
//     0x00, 0x00, 0x0f, 0xf7, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xc0, 0x00, 
//     0x00, 0x00, 0x0f, 0xf1, 0x55, 0x55, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 
//     0x00, 0x00, 0x0f, 0xee, 0xaa, 0xaa, 0x80, 0x07, 0xff, 0xff, 0x80, 0x00, 
//     0x00, 0x00, 0x0f, 0xf7, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0x00, 0x00, 
//     0x00, 0x00, 0x1f, 0xef, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x00, 0x00, 
//     0x00, 0x00, 0x1f, 0xf7, 0xff, 0xff, 0x80, 0x00, 0xff, 0xfe, 0x00, 0x00, 
//     0x00, 0x00, 0x3f, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 
//     0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x70, 0x1e, 0x00, 0x00, 
//     0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x6f, 0xec, 0x00, 0x00, 
//     0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
//     0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xdf, 0x5a, 0x00, 0x00, 
//     0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xdf, 0x57, 0x00, 0x00, 
//     0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xd9, 0x5b, 0x00, 0x00, 
//     0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x56, 0x00, 0x00, 
//     0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x9f, 0xba, 0x00, 0x00, 
//     0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 
//     0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x67, 0xce, 0x00, 0x00, 
//     0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3e, 0x00, 0x00, 
//     0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// };




Adafruit_ST7735 tft = Adafruit_ST7735(10, 9, 8 /* Or set to -1 and connect to Arduino RESET pin*/);

// TFT FUNCTIONS

void tft_printi(short x, short y, short w, short h, const uint8_t *img) { // assumes that w is divisible by 8
    uint16_t *colorArray = new uint16_t[w];
    // uint16_t color;
    for (int r = 0; r < h; r++) {
        for (int c = 0; c < w; c++) {
            colorArray[c] = ((
# 216 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 3
                             (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 216 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino"
                             img + (c/8) + r * (w/8)
# 216 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 3
                             )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })) 
# 216 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino"
                                                                         >> (7- c%8)) % 0x01) ? 0x0000 : 0xFFFF;
            // color = ((pgm_read_byte_near(img + (c/8) + r * (w/8)) >> (7- c%8)) % 0x01) ? ST7735_BLACK : ST7735_WHITE; 
            // tft.drawPixel(x + c, y + r, color);
        }
        tft.startWrite();
        tft.drawRGBBitmap(x, y + r, colorArray, w, 1);
        tft.endWrite();
    }
    delete colorArray;
}

void tft_printc(short x, short y, const char chr, uint16_t color = 0x0000, uint16_t bg = 0xFFFF) {
    static uint16_t colorArray[8 * 16];
    int counter = 0;
    for (int r = 0; r < 16; r++) {
        uint8_t temp = 
# 231 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 3
                      (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 231 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino"
                      asciiBitmap[chr - ' '] + r
# 231 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 3
                      )); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))
# 231 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino"
                                                                    ;
        for (int c = 0; c < 8; c++) {
            colorArray[counter++] = (temp & 0x01) ? color : bg;
            temp >>= 1;
        }
    }
    tft.startWrite();
    tft.drawRGBBitmap(x, y, colorArray, 8, 16);
    tft.endWrite();
}

void _tft_printbigc(short x, short y, const char chr, short w = 8, short h = 16, uint16_t color = 0x0000, uint16_t bg = 0xFFFF) {
    uint16_t *colorArray = new uint16_t[w];
    for (int r = 0; r < h; r++) {
        int rr = (r + 0.5) / h * 16;
        uint8_t temp = 
# 246 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 3
                      (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 246 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino"
                      asciiBitmap[chr - ' '] + rr
# 246 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino" 3
                      )); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))
# 246 "c:\\Users\\pinkp\\Documents\\GitHub\\EMIA\\project\\main.ino"
                                                                     ;
        for (int c = 0; c < w; c++) {
            int cc = (c + 0.5) / w * 8;
            colorArray[c] = ((temp >> (cc)) & 0x01) ? color : bg;
        }
        tft.startWrite();
        tft.drawRGBBitmap(x, y+r, colorArray, w, 1);
        tft.endWrite();
    }
    delete colorArray;
}

void tft_prints(short x, short y, const char *str, uint16_t color = 0x0000, uint16_t bg = 0xFFFF) {
    int counter = 0;
    while (*str != '\0') {
        tft_printc(x + 8*(counter++), y, *(str++), color, bg);
    }
}

void _tft_printbigs(short x, short y, const char *str, short w = 8, short h = 16, uint16_t color = 0x0000, uint16_t bg = 0xFFFF) {
    int counter = 0;
    while (*str != '\0') {
        _tft_printbigc(x + w*(counter++), y, *(str++), w, h, color, bg);
    }
}

void tft_printbigs(short x, short y, const char *str, float scale = 1.0, uint16_t color = 0x0000, uint16_t bg = 0xFFFF) {
    int w = scale * 8;
    int h = scale * 16;
    _tft_printbigs(x, y, str, w, h, color, bg);
}
typedef enum {
    IDLE_STATE, // enter money
    SCAN_BRACELET,
    SCAN_FACE,
    PAYMENT_SUCCESS,
    CANCELLED,
} States;
States state = IDLE_STATE;

const byte ROWS = 4;
const byte COLS = 4;

char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {7, 6, 5, 4};
byte colPins[COLS] = {3, 2, (14), (15)};

Keypad customKeypad = Keypad(((char*)hexaKeys), rowPins, colPins, ROWS, COLS);
String amount = "";

void eventListener(char c) {
    if (customKeypad.getState() == RELEASED) {

        switch (c) {
            case '0': case '1': case '2': case '3': case '4':
            case '5': case '6': case '7': case '8': case '9':
            case '*':
                if (state == IDLE_STATE) {
                    if (amount.length() < 5) {
                        if (c != '*')
                            amount += c;
                        else if (c == '*' && amount.indexOf('.') == -1)
                            amount += '.';
                    }
                }
                break;
            case '#':
                if (state == IDLE_STATE) {
                    if (amount.length() > 0) {
                        amount.remove(amount.length() - 1);
                    }
                }
                break;
            case 'C':
                if (state == IDLE_STATE) {
                    amount = "";
                } else {
                    state = CANCELLED;
                }
                break;
            case 'D':
                if (state == IDLE_STATE) {
                    if (amount != "" || amount != ".") state = SCAN_BRACELET;
                } else if (state == SCAN_BRACELET) {
                    tft_printbigs(20, 50, "SUCCESS!", 1.5, 0x0000, 0x07E0);
                    _delay_ms(500);
                    tft.fillScreen(0xFFFF);
                    state = SCAN_FACE;
                } else if (state == SCAN_FACE) {
                    tft_printbigs(20, 50, "SUCCESS!", 1.5, 0x0000, 0x07E0);
                    _delay_ms(500);
                    state = PAYMENT_SUCCESS;
                }
                break;

        }
    }
}

void setup(void) {
    customKeypad.addEventListener(eventListener);
    customKeypad.setDebounceTime(75);
    Serial.begin(9600);
    tft.initR(0x01); // Init ST7735R chip, green tab
    // tft.fillScreen(ST77XX_BLACK);
    tft.setRotation(0); // set display orientation
    pinMode(13, 0x1); // pull down
    tft.fillScreen(0xFFFF);
}

char buff[20];

void loop() {
    customKeypad.getKey();

    if (state == IDLE_STATE) {
        tft_prints(0, 0, "Enter amount:");
        sprintf(buff, "$ %5s", amount.c_str());
        tft_printbigs(0, 20, buff, 2.0, 0xF800);
    } else if (state == SCAN_BRACELET) {
        // tft_prints(0, 0, "Scan Bracelet:");
        // // tft_printi(16, 16, 96, 96, scan_bracelet);
        // sprintf(buff, "$ %5s", amount.c_str());
        // tft_prints(70, 127-16, buff, ST7735_RED);
        // tft_prints(0, 0, "Scan Face:");
        tft_printi(16, 16, 96, 96, scan_face);
        // sprintf(buff, "$ %5s", amount.c_str());
        // tft_prints(70, 127-16, buff, ST7735_RED);
    } else if (state == SCAN_FACE) {
    } else if (state == PAYMENT_SUCCESS) {
        amount = "";
        tft_printbigs(0, 50, "Transaction", 1.5, 0xF800, 0x07E0);
        tft_printbigs(0, 80, "Success!", 1.5, 0xF800, 0x07E0);
        _delay_ms(2500);
        state = IDLE_STATE;
        tft.fillScreen(0xFFFF);
    } else if (state == CANCELLED) {
        amount = "";
        tft_printbigs(0, 50, "Transaction", 1.5, 0xF800, 0xFFE0);
        tft_printbigs(0, 80, "Cancelled!", 1.5, 0xF800, 0xFFE0);
        _delay_ms(1500);
        state = IDLE_STATE;
        tft.fillScreen(0xFFFF);
    }
}
